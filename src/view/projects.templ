package view

import (
	"alc/config"
	"alc/repository"
	"fmt"
	"path"
	"github.com/jackc/pgx/v5/pgtype"
)

// formatProjectAreaM2 converts pgtype.Numeric to formatted string
func formatProjectAreaM2(area pgtype.Numeric) string {
	if !area.Valid {
		return ""
	}
	var f float64
	val, _ := area.Float64Value()
	if val.Valid {
		f = val.Float64
	}
	return fmt.Sprintf("%.2f m²", f)
}

// ProjectsSection muestra una sección de proyectos (para incluir en páginas)
templ ProjectsSection(projects []repository.Project, projectImages map[int32]repository.ListProjectImagesRow) {
	<section id="galeria">
		<div class="py-16 lg:py-24">
			<!-- Heading - constrained -->
			<div class="px-4 max-w-7xl mx-auto">
				<h2 class="text-center font-medium text-2xl lg:text-3xl">
					Obras realizadas
				</h2>
			</div>
			<!-- Swiper Carousel - full width -->
			<div class="relative mt-12 lg:mt-16 px-4 max-w-7xl mx-auto">
				<div class="swiper projects-swiper">
					<div class="swiper-wrapper">
						if len(projects) == 0 {
							<!-- Placeholder slides -->
							<div class="swiper-slide">
								<a href="/proyectos" class="block">
									<div class="border border-black aspect-square">
										<img class="object-cover w-full h-full" src="/static/img/placeholder.webp" alt="placeholder"/>
									</div>
								</a>
							</div>
							<div class="swiper-slide">
								<a href="/proyectos" class="block">
									<div class="border border-black aspect-square">
										<img class="object-cover w-full h-full" src="/static/img/placeholder.webp" alt="placeholder"/>
									</div>
								</a>
							</div>
							<div class="swiper-slide">
								<a href="/proyectos" class="block">
									<div class="border border-black aspect-square">
										<img class="object-cover w-full h-full" src="/static/img/placeholder.webp" alt="placeholder"/>
									</div>
								</a>
							</div>
						} else {
							for _, proj := range projects {
								<div class="swiper-slide">
									@ProjectSliderCard(proj, projectImages[proj.ProjectID])
								</div>
							}
						}
					</div>
				</div>
			</div>
			<!-- View All button - constrained -->
			<div class="px-4 max-w-7xl mx-auto">
				<div class="text-center mt-8">
					<a href="/proyectos" class="inline-block px-6 py-3 bg-livid text-white font-semibold hover:bg-livid/90 transition-colors">
						Ver Todos los Proyectos
					</a>
				</div>
			</div>
		</div>
		<!-- Swiper Initialization -->
		<script>
			new Swiper('.projects-swiper', {
				slidesPerView: 1.2,
				centeredSlides: false,
				spaceBetween: 24,
				grabCursor: true,
				loop: false,
				autoplay: {
					delay: 3000,
					disableOnInteraction: true,
					pauseOnMouseEnter: true
				},
				breakpoints: {
					// Mobile
					480: {
						slidesPerView: 1.5,
						spaceBetween: 16
					},
					// Tablet
					640: {
						slidesPerView: 2.5,
						spaceBetween: 20
					},
					// Desktop
					1024: {
						slidesPerView: 3.5,
						spaceBetween: 24
					},
					// Large Desktop
					1280: {
						slidesPerView: 4,
						spaceBetween: 24
					}
				}
			});
		</script>
	</section>
}

// ProjectSliderCard muestra una tarjeta de proyecto para el slider horizontal
templ ProjectSliderCard(project repository.Project, featuredImage repository.ListProjectImagesRow) {
	<a href="/proyectos" class="flex-none w-72 snap-center group">
		<div class="border border-black aspect-square overflow-hidden hover:shadow-xl transition-shadow">
			<div class="relative w-full h-full">
				if featuredImage.ImageID != 0 {
					<img
						class="object-cover w-full h-full group-hover:scale-105 transition-transform duration-300"
						src={ path.Join(config.IMAGES_PATH, featuredImage.FileName) }
						alt={ project.Description }
					/>
				} else {
					<img class="object-cover w-full h-full" src="/static/img/placeholder.webp" alt={ project.Description }/>
				}
				<div class="absolute bottom-0 left-0 right-0 bg-black/70 text-white p-4">
					<h3 class="font-semibold text-base line-clamp-2">{ project.Description }</h3>
					<p class="text-xs mt-1 line-clamp-1">{ project.Location }</p>
				</div>
			</div>
		</div>
	</a>
}

// ProjectCard muestra una tarjeta de proyecto individual
templ ProjectCard(project repository.Project, featuredImage repository.ListProjectImagesRow) {
	<a href={ templ.URL(fmt.Sprintf("/proyectos/%s", project.Slug)) } class="border border-black aspect-video max-w-96 group hover:shadow-lg transition-shadow">
		<div class="relative w-full h-full overflow-hidden">
			if featuredImage.ImageID != 0 {
				<img
					class="object-cover w-full h-full group-hover:scale-105 transition-transform duration-300"
					src={ path.Join(config.IMAGES_PATH, featuredImage.FileName) }
					alt={ project.Description }
				/>
			} else {
				<img class="object-cover w-full h-full" src="/static/img/placeholder.webp" alt={ project.Description }/>
			}
			<div class="absolute bottom-0 left-0 right-0 bg-black/70 text-white p-4">
				<h3 class="font-semibold text-lg">{ project.Description }</h3>
				<p class="text-sm">{ project.Location } • { project.Period }</p>
			</div>
		</div>
	</a>
}

// ProjectGridItem muestra un proyecto con información y carousel de imágenes
templ ProjectGridItem(project repository.Project, images []repository.ListProjectImagesRow, index int) {
	<div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
		<!-- Left side: Project Information -->
		<div class="flex flex-col space-y-4">
			<div>
				<span class="font-semibold text-lg">Descripción:</span>
				<span class="text-lg ml-2">{ project.Description }</span>
			</div>
			<div>
				<span class="font-semibold text-lg">Ubicación:</span>
				<span class="text-lg ml-2">{ project.Location }</span>
			</div>
			<div>
				<span class="font-semibold text-lg">Periodo:</span>
				<span class="text-lg ml-2">{ project.Period }</span>
			</div>
			if project.AreaM2.Valid {
				<div>
					<span class="font-semibold text-lg">M2:</span>
					<span class="text-lg ml-2">{ formatProjectAreaM2(project.AreaM2) }</span>
				</div>
			}
			<div>
				<span class="font-semibold text-lg">Servicio:</span>
				<span class="text-lg ml-2">{ project.Service }</span>
			</div>
		</div>
		<!-- Right side: Image Carousel -->
		<div class="relative">
			<div class={ fmt.Sprintf("swiper project-swiper project-swiper-%d", index) } data-index={ fmt.Sprintf("%d", index) }>
				<div class="swiper-wrapper">
					if len(images) == 0 {
						<div class="swiper-slide">
							<div class="border border-black aspect-square">
								<img class="object-cover w-full h-full" src="/static/img/placeholder.webp" alt="placeholder"/>
							</div>
						</div>
					} else {
						for _, img := range images {
							<div class="swiper-slide">
								<div class="border border-black aspect-square overflow-hidden cursor-pointer carousel-click" data-carousel-index={ fmt.Sprintf("%d", index) }>
									<img
										class="object-cover w-full h-full"
										src={ path.Join(config.IMAGES_PATH, img.FileName) }
										alt={ project.Description }
									/>
								</div>
							</div>
						}
					}
				</div>
				<!-- Navigation arrows -->
				<div class={ fmt.Sprintf("swiper-button-next swiper-button-next-%d", index) }></div>
				<div class={ fmt.Sprintf("swiper-button-prev swiper-button-prev-%d", index) }></div>
			</div>
		</div>
		<!-- Fullscreen Modal -->
		<div id={ fmt.Sprintf("fullscreen-modal-%d", index) } class="hidden fixed inset-0 bg-black bg-opacity-95 z-50">
			<button class="absolute top-4 right-4 text-white text-4xl z-50 hover:text-gray-300 close-fullscreen" data-carousel-index={ fmt.Sprintf("%d", index) }>
				×
			</button>
			<div class={ fmt.Sprintf("swiper fullscreen-swiper-%d w-full h-full", index) } data-index={ fmt.Sprintf("%d", index) }>
				<div class="swiper-wrapper">
					if len(images) > 0 {
						for _, img := range images {
							<div class="swiper-slide">
								<div class="w-full h-full flex items-center justify-center">
									<img
										class="max-w-full max-h-full object-contain"
										src={ path.Join(config.IMAGES_PATH, img.FileName) }
										alt={ project.Description }
									/>
								</div>
							</div>
						}
					}
				</div>
				<!-- Navigation arrows -->
				<div class={ fmt.Sprintf("swiper-button-next swiper-button-next-fs-%d", index) }></div>
				<div class={ fmt.Sprintf("swiper-button-prev swiper-button-prev-fs-%d", index) }></div>
			</div>
		</div>
	</div>
}

// ProjectsPage muestra la página completa de proyectos
templ ProjectsPage(projects []repository.Project, projectImages map[int32][]repository.ListProjectImagesRow) {
	@BasePage("Proyectos") {
		<main class="min-h-[calc(100dvh-8rem)] lg:min-h-[calc(100dvh-9.5rem)]">
			<section>
				<div class="px-4 py-16 max-w-7xl mx-auto lg:py-24">
					<h1 class="text-center font-semibold text-3xl uppercase mb-12">
						PRINCIPALES OBRAS EJECUTADAS
					</h1>
					if len(projects) == 0 {
						<div class="text-center text-base-content/60 py-8">
							No hay proyectos disponibles en este momento.
						</div>
					} else {
						<div class="flex flex-col gap-12 lg:grid lg:grid-cols-2 lg:gap-16">
							for i, proj := range projects {
								@ProjectGridItem(proj, projectImages[proj.ProjectID], i)
							}
						</div>
					}
				</div>
			</section>
			<!-- Initialize all project swipers -->
			<script>
				// Store swiper instances
				const projectSwipers = {};
				const fullscreenSwipers = {};

				document.addEventListener('DOMContentLoaded', function() {
					// Initialize regular carousels
					document.querySelectorAll('.project-swiper').forEach(function(swiperEl) {
						const index = swiperEl.getAttribute('data-index');
						projectSwipers[index] = new Swiper('.project-swiper-' + index, {
							slidesPerView: 1,
							spaceBetween: 0,
							loop: false,
							autoplay: {
								delay: 3000,
								disableOnInteraction: true,
								pauseOnMouseEnter: true
							},
							navigation: {
								nextEl: '.swiper-button-next-' + index,
								prevEl: '.swiper-button-prev-' + index,
							}
						});
					});

					// Attach click handlers to carousel images
					document.querySelectorAll('.carousel-click').forEach(function(el) {
						el.addEventListener('click', function() {
							const index = this.getAttribute('data-carousel-index');
							openFullscreenCarousel(parseInt(index));
						});
					});

					// Attach click handlers to close buttons
					document.querySelectorAll('.close-fullscreen').forEach(function(el) {
						el.addEventListener('click', function() {
							const index = this.getAttribute('data-carousel-index');
							closeFullscreenCarousel(parseInt(index));
						});
					});

					// Handle Esc key
					document.addEventListener('keydown', function(e) {
						if (e.key === 'Escape') {
							closeAllFullscreenCarousels();
						}
					});
				});

				function openFullscreenCarousel(index) {
					const modal = document.getElementById('fullscreen-modal-' + index);
					if (modal) {
						// Get current slide index from regular carousel
						const currentIndex = projectSwipers[index] ? projectSwipers[index].activeIndex : 0;

						// Show modal
						modal.classList.remove('hidden');

						// Initialize fullscreen swiper if not already done (lazy initialization)
						if (!fullscreenSwipers[index]) {
							fullscreenSwipers[index] = new Swiper('.fullscreen-swiper-' + index, {
								slidesPerView: 1,
								spaceBetween: 0,
								loop: false,
								autoplay: {
									delay: 3000,
									disableOnInteraction: true,
									pauseOnMouseEnter: true
								},
								navigation: {
									nextEl: '.swiper-button-next-fs-' + index,
									prevEl: '.swiper-button-prev-fs-' + index,
								}
							});
						}

						// Sync fullscreen carousel to same slide
						if (fullscreenSwipers[index]) {
							fullscreenSwipers[index].slideTo(currentIndex, 0);
							fullscreenSwipers[index].update();
							// Start autoplay
							if (fullscreenSwipers[index].autoplay) {
								fullscreenSwipers[index].autoplay.start();
							}
						}

						// Prevent body scroll
						document.body.style.overflow = 'hidden';
					}
				}

				function closeFullscreenCarousel(index) {
					const modal = document.getElementById('fullscreen-modal-' + index);
					if (modal) {
						modal.classList.add('hidden');
						document.body.style.overflow = '';
					}
				}

				function closeAllFullscreenCarousels() {
					document.querySelectorAll('[id^="fullscreen-modal-"]').forEach(function(modal) {
						modal.classList.add('hidden');
					});
					document.body.style.overflow = '';
				}
			</script>
			<!-- Formulario -->
			<div class="px-4 py-16 max-w-7xl mx-auto lg:py-24">
				@Form()
			</div>
		</main>
	}
}

// ProjectDetailPage muestra el detalle completo de un proyecto
templ ProjectDetailPage(project repository.Project, images []repository.ListProjectImagesRow) {
	@BasePage(project.Description) {
		<main class="min-h-[calc(100dvh-8rem)] lg:min-h-[calc(100dvh-9.5rem)]">
			<section>
				<div class="px-4 py-16 max-w-7xl mx-auto lg:py-24">
					<!-- Breadcrumb -->
					<div class="mb-8 text-sm">
						<a href="/" class="hover:underline">Inicio</a>
						<span class="mx-2">/</span>
						<a href="/proyectos" class="hover:underline">Proyectos</a>
						<span class="mx-2">/</span>
						<span class="text-base-content/60">{ project.Description }</span>
					</div>
					<!-- Project Header -->
					<div class="mb-12">
						<h1 class="text-3xl font-bold mb-4 lg:text-4xl">{ project.Description }</h1>
						<div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-lg">
							<div>
								<span class="font-semibold">Ubicación:</span> { project.Location }
							</div>
							<div>
								<span class="font-semibold">Periodo:</span> { project.Period }
							</div>
							if project.AreaM2.Valid {
								<div>
									<span class="font-semibold">Área:</span> { formatProjectAreaM2(project.AreaM2) }
								</div>
							}
						</div>
					</div>
					<!-- Project Images Gallery -->
					if len(images) > 0 {
						<div class="mb-12">
							<h2 class="text-2xl font-semibold mb-6">Galería de Imágenes</h2>
							<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
								for _, img := range images {
									<div class="border border-black overflow-hidden cursor-pointer hover:shadow-lg transition-shadow" onclick="handleImageFullscreen(event)">
										<div class="flex justify-center items-center img-div bg-black aspect-video">
											<img
												class="object-cover w-full h-full"
												src={ path.Join(config.IMAGES_PATH, img.FileName) }
												alt="Project image"
											/>
										</div>
									</div>
								}
							</div>
							<script>
								function handleImageFullscreen(event) {
									const el = event.currentTarget;
									const mydiv = el.querySelector(".img-div");
									if (document.fullscreenElement) {
										document.exitFullscreen();
									} else {
										mydiv.requestFullscreen();
									}
								}
							</script>
						</div>
					}
					<!-- Project Service Description -->
					<div class="mb-12">
						<h2 class="text-2xl font-semibold mb-4">Servicio Prestado</h2>
						<div class="p-6 border border-black rounded-lg bg-cloud/30">
							<p class="text-lg">{ project.Service }</p>
						</div>
					</div>
					<!-- Back to Projects -->
					<div class="text-center mt-12">
						<a href="/proyectos" class="inline-block px-6 py-3 border-2 border-black font-semibold hover:bg-black hover:text-white transition-colors">
							← Volver a Proyectos
						</a>
					</div>
				</div>
			</section>
			<!-- Formulario -->
			<div class="px-4 py-16 max-w-7xl mx-auto lg:py-24">
				@Form()
			</div>
		</main>
	}
}
